#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä
 */

const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const DEPLOY_CONFIG = {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server: {
        host: 'your-vps-ip',
        user: 'root',
        port: 22,
        path: '/opt/chiwawa-server'
    },
    
    // –ß—Ç–æ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
    exclude: [
        'node_modules/',
        '.git/',
        'logs/',
        'temp/',
        'uploads/',
        'backups/',
        '.env',
        '*.log'
    ],
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    commands: [
        'npm install --production',
        'npm run db:migrate',
        'pm2 restart chiwawa-server || pm2 start ecosystem.config.js'
    ]
};

function log(message, level = 'info') {
    const timestamp = new Date().toISOString();
    const levels = {
        info: 'üìã',
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è'
    };
    
    console.log(`${levels[level]} [${timestamp}] ${message}`);
}

async function checkPrerequisites() {
    log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ git
    try {
        execSync('git --version', { stdio: 'ignore' });
        log('Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    } catch {
        throw new Error('Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rsync
    try {
        execSync('rsync --version', { stdio: 'ignore' });
        log('rsync —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    } catch {
        throw new Error('rsync –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ git
    try {
        const status = execSync('git status --porcelain', { encoding: 'utf8' });
        if (status.trim()) {
            log('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'warning');
            log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å commit –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º', 'warning');
        }
    } catch {
        log('–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞ git', 'warning');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
    if (!fs.existsSync('package.json')) {
        throw new Error('package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    log('–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã', 'success');
}

async function buildProject() {
    log('–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –Ω–∞ –Ω–∞–ª–∏—á–∏–µ build —Å–∫—Ä–∏–ø—Ç–∞
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        
        if (packageJson.scripts && packageJson.scripts.build) {
            execSync('npm run build', { stdio: 'inherit' });
            log('–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω', 'success');
        } else {
            log('–°–∫—Ä–∏–ø—Ç build –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É', 'warning');
        }
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`);
    }
}

async function deployToServer() {
    log('–î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    
    const { host, user, port, path: serverPath } = DEPLOY_CONFIG.server;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É rsync
    const excludeArgs = DEPLOY_CONFIG.exclude.map(pattern => `--exclude=${pattern}`).join(' ');
    const rsyncCommand = `rsync -avz --delete ${excludeArgs} ./ ${user}@${host}:${serverPath}/`;
    
    try {
        log(`–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ ${host}...`);
        execSync(rsyncCommand, { stdio: 'inherit' });
        log('–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
}

async function runServerCommands() {
    log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
    
    const { host, user, path: serverPath } = DEPLOY_CONFIG.server;
    
    for (const command of DEPLOY_CONFIG.commands) {
        try {
            log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${command}`);
            const sshCommand = `ssh ${user}@${host} "cd ${serverPath} && ${command}"`;
            execSync(sshCommand, { stdio: 'inherit' });
            log(`–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${command}`, 'success');
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã "${command}": ${error.message}`, 'error');
            throw error;
        }
    }
}

async function checkDeployment() {
    log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...');
    
    const { host, user, path: serverPath } = DEPLOY_CONFIG.server;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PM2
        const checkCommand = `ssh ${user}@${host} "cd ${serverPath} && pm2 list | grep chiwawa-server"`;
        execSync(checkCommand, { stdio: 'inherit' });
        log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ', 'success');
    } catch (error) {
        log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'warning');
    }
}

async function deploy() {
    const startTime = Date.now();
    
    try {
        log('üöÄ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è Chiwawa Server');
        
        await checkPrerequisites();
        await buildProject();
        await deployToServer();
        await runServerCommands();
        await checkDeployment();
        
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        log(`üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}—Å`, 'success');
        
        console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:');
        console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç: http://${DEPLOY_CONFIG.server.host}`);
        console.log(`2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ssh ${DEPLOY_CONFIG.server.user}@${DEPLOY_CONFIG.server.host} "pm2 logs chiwawa-server"`);
        console.log(`3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ssh ${DEPLOY_CONFIG.server.user}@${DEPLOY_CONFIG.server.host} "pm2 monit"`);
        
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: ${error.message}`, 'error');
        process.exit(1);
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ CLI
function configure() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    const questions = [
        'IP –∞–¥—Ä–µ—Å VPS —Å–µ—Ä–≤–µ—Ä–∞: ',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é root): ',
        '–ü–æ—Ä—Ç SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22): ',
        '–ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /opt/chiwawa-server): '
    ];
    
    let answers = [];
    let currentQuestion = 0;
    
    function askQuestion() {
        if (currentQuestion < questions.length) {
            rl.question(questions[currentQuestion], (answer) => {
                answers.push(answer || getDefaultValue(currentQuestion));
                currentQuestion++;
                askQuestion();
            });
        } else {
            rl.close();
            saveConfig(answers);
        }
    }
    
    function getDefaultValue(index) {
        const defaults = ['', 'root', '22', '/opt/chiwawa-server'];
        return defaults[index];
    }
    
    function saveConfig(answers) {
        const config = {
            server: {
                host: answers[0],
                user: answers[1],
                port: parseInt(answers[2]),
                path: answers[3]
            }
        };
        
        fs.writeFileSync('deploy.config.json', JSON.stringify(config, null, 2));
        log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ deploy.config.json', 'success');
    }
    
    askQuestion();
}

// CLI –∫–æ–º–∞–Ω–¥—ã
if (require.main === module) {
    const command = process.argv[2];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (fs.existsSync('deploy.config.json')) {
        const userConfig = JSON.parse(fs.readFileSync('deploy.config.json', 'utf8'));
        Object.assign(DEPLOY_CONFIG, userConfig);
    }
    
    switch (command) {
        case 'configure':
            configure();
            break;
        case 'deploy':
            deploy();
            break;
        default:
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
            console.log('  node scripts/deploy.js configure  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ø–ª–æ—è');
            console.log('  node scripts/deploy.js deploy     # –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            console.log('  npm run deploy                    # –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π');
    }
}

module.exports = { deploy, configure };
