const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
const pool = new Pool({
    host: process.env.DB_HOST || '212.15.49.139',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'chiwawa',
    user: process.env.DB_USER || 'chiwawa',
    password: process.env.DB_PASS || 'mtU-PSM-cFP-2D6',
    max: 10,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
});

async function checkEmailTemplatesTable() {
    const client = await pool.connect();
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã email_templates...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const result = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'email_templates' 
            ORDER BY ordinal_position
        `);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ email_templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        } else {
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã email_templates:');
            result.rows.forEach(row => {
                console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const dataResult = await client.query('SELECT COUNT(*) as count FROM email_templates');
        console.log(`üìä –í —Ç–∞–±–ª–∏—Ü–µ ${dataResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        if (dataResult.rows[0].count > 0) {
            const sampleResult = await client.query('SELECT * FROM email_templates LIMIT 3');
            console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
            sampleResult.rows.forEach((row, index) => {
                console.log(`  ${index + 1}. ID: ${row.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${row.template_name || 'N/A'}`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    } finally {
        client.release();
        await pool.end();
    }
}

checkEmailTemplatesTable();
