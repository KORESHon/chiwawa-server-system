const { Pool } = require('pg');
require('dotenv').config();

const getDbHost = () => {
    if (process.env.NODE_ENV === 'production') {
        return process.env.DB_HOST || 'localhost';
    } else {
        return process.env.DB_HOST || '212.15.49.139';
    }
}

const pool = new Pool({
    host: getDbHost(),
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'chiwawa',
    user: process.env.DB_USER || 'chiwawa',
    password: process.env.DB_PASS || 'mtU-PSM-cFP-2D6',
    max: 10,
    idleTimeoutMillis: 60000,
    connectionTimeoutMillis: 30000,
    query_timeout: 20000,
    keepAlive: true,
    keepAliveInitialDelayMillis: 0,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function finalTest() {
    try {
        console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ù–ê–°–¢–†–û–ï–ö\n');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã
        console.log('üìä 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
        const structureResult = await pool.query(`
            SELECT setting_key, category, setting_type, description
            FROM server_settings 
            ORDER BY category, setting_key
            LIMIT 10
        `);
        
        structureResult.rows.forEach(row => {
            console.log(`  [${row.category}] ${row.setting_key} (${row.setting_type}) - ${row.description}`);
        });
        console.log(`  ... –∏ –µ—â—ë ${await pool.query('SELECT COUNT(*) FROM server_settings').then(r => r.rows[0].count - 10)} –Ω–∞—Å—Ç—Ä–æ–µ–∫\n`);

        // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
        console.log('üíæ 2. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É:');
        const testValues = {
            'server-name': 'ChiwawaServer-AdminTest',
            'server-description': '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É',
            'max-players': '150'
        };

        for (const [key, value] of Object.entries(testValues)) {
            await pool.query(`
                UPDATE server_settings 
                SET setting_value = $1, updated_at = CURRENT_TIMESTAMP 
                WHERE setting_key = $2
            `, [value, key]);
            console.log(`  ‚úÖ ${key}: ${value}`);
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–∞–∫ –≤ GET /api/admin/settings)
        console.log('\nüìñ 3. –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∞–¥–º–∏–Ω–∫–∞):');
        const adminSettings = await pool.query(`
            SELECT setting_key, setting_value, setting_type, category 
            FROM server_settings 
            WHERE setting_key IN ('server-name', 'server-description', 'max-players')
        `);

        const convertedAdminSettings = {};
        adminSettings.rows.forEach(row => {
            const camelKey = row.setting_key.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
            let parsedValue = row.setting_value;
            if (row.setting_type === 'integer') {
                parsedValue = parseInt(row.setting_value);
            }
            convertedAdminSettings[camelKey] = parsedValue;
        });

        console.log('  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏:');
        Object.entries(convertedAdminSettings).forEach(([key, value]) => {
            console.log(`    ${key}: ${value} (${typeof value})`);
        });

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞–∫ –≤ GET /api/settings/public)
        console.log('\nüåê 4. –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞):');
        const publicSettings = await pool.query(`
            SELECT setting_key, setting_value 
            FROM server_settings 
            WHERE setting_key IN ('server-name', 'server-description', 'server-ip', 'server-port', 'discord-invite', 'telegram-invite')
        `);

        const publicResult = {};
        publicSettings.rows.forEach(row => {
            publicResult[row.setting_key] = row.setting_value;
        });

        console.log('  –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
        Object.entries(publicResult).forEach(([key, value]) => {
            console.log(`    ${key}: ${value}`);
        });

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞–¥–º–∏–Ω–∫–∞ -> –±–∞–∑–∞ -> API -> —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        console.log('\nüîÑ 5. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:');
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
        const uniqueValue = 'Test-' + Date.now();
        await pool.query('UPDATE server_settings SET setting_value = $1 WHERE setting_key = $2', [uniqueValue, 'server-name']);
        console.log(`  üìù –ê–¥–º–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞: ${uniqueValue}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω–µ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        const apiResult = await pool.query('SELECT setting_value FROM server_settings WHERE setting_key = $1', ['server-name']);
        console.log(`  üì° API –≤–µ—Ä–Ω–µ—Ç: ${apiResult.rows[0].setting_value}`);

        if (apiResult.rows[0].setting_value === uniqueValue) {
            console.log('  ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        } else {
            console.log('  ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ!');
        }

        // 6. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        console.log('\nüîÑ 6. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:');
        const restoreValues = {
            'server-name': 'ChiwawaMine',
            'server-description': '–õ—É—á—à–∏–π Minecraft —Å–µ—Ä–≤–µ—Ä —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º',
            'max-players': '100'
        };

        for (const [key, value] of Object.entries(restoreValues)) {
            await pool.query('UPDATE server_settings SET setting_value = $1 WHERE setting_key = $2', [value, key]);
            console.log(`  üîÑ ${key}: ${value}`);
        }

        // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log('\n‚úÖ 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:');
        const finalCheck = await pool.query(`
            SELECT COUNT(*) as total, 
                   COUNT(DISTINCT category) as categories,
                   COUNT(CASE WHEN setting_key LIKE '%-%' THEN 1 END) as kebab_case_keys,
                   COUNT(CASE WHEN setting_key LIKE '%_%' THEN 1 END) as snake_case_keys
            FROM server_settings
        `);

        const stats = finalCheck.rows[0];
        console.log(`  üìä –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${stats.total}`);
        console.log(`  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.categories}`);
        console.log(`  üîó –ö–ª—é—á–µ–π –≤ kebab-case: ${stats.kebab_case_keys}`);
        console.log(`  üêç –ö–ª—é—á–µ–π –≤ snake_case: ${stats.snake_case_keys}`);

        if (stats.snake_case_keys === '0') {
            console.log('  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö snake_case –∫–ª—é—á–µ–π!');
        } else {
            console.log('  ‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å snake_case –∫–ª—é—á–∏');
        }

        console.log('\nüéâ –ò–¢–û–ì:');
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å —á–∏—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π');
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∫–∞—è –ø–∞–Ω–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å kebab-case');
        console.log('‚úÖ GET /api/admin/settings –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–∏');
        console.log('‚úÖ POST /api/admin/settings —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏');
        console.log('‚úÖ GET /api/settings/public —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        console.log('‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–¥–º–∏–Ω–∫–∞ -> –±–∞–∑–∞ -> API -> —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
        console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

        await pool.end();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error.message);
        process.exit(1);
    }
}

finalTest();
