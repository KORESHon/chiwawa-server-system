const { Pool } = require('pg');
require('dotenv').config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const getDbHost = () => {
    if (process.env.NODE_ENV === 'production') {
        return process.env.DB_HOST || 'localhost';
    } else {
        return process.env.DB_HOST || '212.15.49.139';
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
    host: getDbHost(),
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'chiwawa',
    user: process.env.DB_USER || 'chiwawa',
    password: process.env.DB_PASS || 'mtU-PSM-cFP-2D6',
    max: 10, // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    idleTimeoutMillis: 60000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connectionTimeoutMillis: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    query_timeout: 20000, // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
    keepAlive: true,
    keepAliveInitialDelayMillis: 0,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
pool.on('error', (err, client) => {
    console.error('–û—à–∏–±–∫–∞ PostgreSQL:', err);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function query(text, params, retries = 3) {
    // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
    if (process.env.NO_DATABASE === 'true') {
        console.log('üî∂ Running in NO_DATABASE mode - query skipped:', text.substring(0, 50) + '...');
        return { rows: [], rowCount: 0 };
    }
    
    const start = Date.now();
    
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const res = await pool.query(text, params);
            const duration = Date.now() - start;
            console.log('‚úÖ Query executed successfully', { 
                attempt, 
                duration: `${duration}ms`, 
                rows: res.rowCount 
            });
            return res;
        } catch (error) {
            console.error(`‚ùå Query attempt ${attempt}/${retries} failed:`, {
                error: error.message,
                code: error.code,
                host: getDbHost()
            });
            
            if (attempt === retries) {
                console.error('üö® All query attempts failed:', error);
                throw error;
            }
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
            const delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000);
            console.log(`‚è≥ Waiting ${delay}ms before retry...`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É–ª–∞
async function getClient() {
    return await pool.connect();
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testConnection(fallbackToLocal = true) {
    let client;
    try {
        console.log('üîÑ Testing database connection...');
        console.log(`üìç Host: ${getDbHost()}:${process.env.DB_PORT || 5432}`);
        console.log(`üóÑÔ∏è Database: ${process.env.DB_NAME || 'chiwawa'}`);
        console.log(`üë§ User: ${process.env.DB_USER || 'chiwawa'}`);
        console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
        
        client = await pool.connect();
        const result = await client.query('SELECT NOW() as current_time, version() as version');
        
        console.log('‚úÖ Database connection successful!');
        console.log(`üïê Server time: ${result.rows[0].current_time}`);
        console.log(`üìä PostgreSQL version: ${result.rows[0].version.split(' ')[0]} ${result.rows[0].version.split(' ')[1]}`);
        
        return true;
    } catch (error) {
        console.error('‚ùå Database connection failed:', {
            message: error.message,
            code: error.code,
            host: getDbHost(),
            port: process.env.DB_PORT || 5432
        });
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        if (error.code === 'ENOTFOUND') {
            console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏');
        } else if (error.code === 'ECONNREFUSED') {
            console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
            console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç PostgreSQL (–æ–±—ã—á–Ω–æ 5432)');
        } else if (error.code === 'ECONNRESET') {
            console.log('üí° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º:');
            console.log('   1. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ë–î –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pg_hba.conf –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞');
            if (fallbackToLocal && getDbHost() !== 'localhost') {
                console.log('   4. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...');
                return await testLocalConnection();
            }
        } else if (error.code === '28P01') {
            console.log('üí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        } else if (error.code === '3D000') {
            console.log('üí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É "chiwawa"');
        }
        
        return false;
    } finally {
        if (client) {
            client.release();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testLocalConnection() {
    console.log('üîÑ Trying local database connection...');
    
    const localPool = new Pool({
        host: 'localhost',
        port: process.env.DB_PORT || 5432,
        database: process.env.DB_NAME || 'chiwawa',
        user: process.env.DB_USER || 'chiwawa',
        password: process.env.DB_PASS || 'mtU-PSM-cFP-2D6',
        max: 5,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 5000,
    });
    
    let client;
    try {
        client = await localPool.connect();
        console.log('‚úÖ Local database connection successful!');
        return true;
    } catch (error) {
        console.error('‚ùå Local database connection also failed:', error.message);
        return false;
    } finally {
        if (client) client.release();
        await localPool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function end() {
    await pool.end();
}

module.exports = {
    query,
    getClient,
    testConnection,
    testLocalConnection,
    end,
    pool
};