// –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const profileRoutes = require('./routes/profile');
const applicationRoutes = require('./routes/applications');
const adminRoutes = require('./routes/admin');

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet());

// –û–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
const generalLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ IP
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—à–µ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});

app.use(generalLimiter);

// Middleware
app.use(cors({
    origin: process.env.FRONTEND_URL || '*',
    credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞
app.use((req, res, next) => {
    req.ip = req.headers['x-forwarded-for'] || 
             req.headers['x-real-ip'] || 
             req.connection.remoteAddress || 
             req.socket.remoteAddress ||
             (req.connection.socket ? req.connection.socket.remoteAddress : null);
    next();
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/profile', profileRoutes);
app.use('/api/applications', applicationRoutes);
app.use('/api/admin', adminRoutes);

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../website/index.html'));
});

app.get('/profile', (req, res) => {
    res.sendFile(path.join(__dirname, '../website/profile.html'));
});

app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, '../website/admin.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
app.get('/api/server-info', async (req, res) => {
    try {
        res.json({
            name: "Chiwawa Server",
            version: "1.20.1",
            online: true,
            players: {
                online: 5,
                max: 50
            },
            description: "–í—ã–∂–∏–≤–∞–Ω–∏–µ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∏ –æ—Ç–ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º!",
            ip: "212.15.49.139",
            port: 25565,
            last_updated: new Date().toISOString()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// 404 –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/*', (req, res) => {
    res.status(404).json({ error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function validateApplicationData(data) {
    const { minecraft_nick, age, discord, email, experience, motivation, plans } = data;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!minecraft_nick || !age || !discord || !email || !experience || !motivation || !plans) {
        return { valid: false, error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è Minecraft –Ω–∏–∫–∞
    if (minecraft_nick.trim().length < 3 || minecraft_nick.trim().length > 16) {
        return { valid: false, error: 'Minecraft –Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤' };
    }
    
    if (!/^[a-zA-Z0-9_]+$/.test(minecraft_nick.trim())) {
        return { valid: false, error: 'Minecraft –Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è' };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!validateEmail(email.trim())) {
        return { valid: false, error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    const ageNum = parseInt(age);
    if (isNaN(ageNum) || ageNum < 10 || ageNum > 99) {
        return { valid: false, error: '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 99 –ª–µ—Ç' };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    if (motivation.trim().length < 50) {
        return { valid: false, error: '–û–ø–∏—Å–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤' };
    }
    
    if (motivation.trim().length > 800) {
        return { valid: false, error: '–û–ø–∏—Å–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤
    if (plans.trim().length < 30) {
        return { valid: false, error: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }
    
    if (plans.trim().length > 600) {
        return { valid: false, error: '–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 600 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }
    
    return { valid: true };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
function logApplication(applicationData) {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        ...applicationData
    };
    
    const logLine = `${timestamp} | ${applicationData.minecraft_nick} | ${applicationData.age} | ${applicationData.discord} | ${applicationData.email} | ${applicationData.experience} | ${applicationData.motivation} | ${applicationData.plans}\n`;
    
    try {
        fs.appendFileSync(APPLICATIONS_LOG, logLine, 'utf8');
        console.log('‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
            timestamp,
            minecraft_nick: applicationData.minecraft_nick,
            age: applicationData.age,
            discord: applicationData.discord,
            email: applicationData.email,
            experience: applicationData.experience
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', error);
    }
}

// API Routes

// POST /api/apply - –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
app.post('/api/apply', (req, res) => {
    console.log('üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', req.body);
    
    try {
        const validation = validateApplicationData(req.body);
        
        if (!validation.valid) {
            return res.status(400).json({
                success: false,
                error: validation.error
            });
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const applicationData = {
            minecraft_nick: req.body.minecraft_nick.trim(),
            age: parseInt(req.body.age),
            discord: req.body.discord.trim(),
            email: req.body.email.trim().toLowerCase(),
            experience: req.body.experience,
            motivation: req.body.motivation.trim(),
            plans: req.body.plans.trim()
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        logApplication(applicationData);
        
        res.json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        });
    }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è frontend)
app.use(express.static(path.join(__dirname, '../website')));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${PORT}`);
    console.log(`ÔøΩ –ü—Ä–æ—Ñ–∏–ª—å: http://localhost:${PORT}/profile`);
    console.log(`‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin`);
    console.log(`üìã API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:`);
    console.log(`   Auth: /api/auth/*`);
    console.log(`   Profile: /api/profile/*`);
    console.log(`   Applications: /api/applications/*`);
    console.log(`   Admin: /api/admin/*`);
});
