// –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy

const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è frontend)
app.use(express.static(path.join(__dirname, '../website')));

// –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
const APPLICATIONS_LOG = path.join(__dirname, 'applications.log');

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function validateApplicationData(data) {
    const { minecraft_nick, discord, email, reason } = data;
    
    if (!minecraft_nick || !discord || !email || !reason) {
        return { valid: false, error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' };
    }
    
    if (minecraft_nick.trim().length < 3 || minecraft_nick.trim().length > 16) {
        return { valid: false, error: '–ù–∏–∫ –≤ Minecraft –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤' };
    }
    
    if (!validateEmail(email.trim())) {
        return { valid: false, error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' };
    }
    
    if (reason.trim().length < 10) {
        return { valid: false, error: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }
    
    return { valid: true };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
function logApplication(applicationData) {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        ...applicationData
    };
    
    const logLine = `${timestamp} | ${applicationData.minecraft_nick} | ${applicationData.discord} | ${applicationData.email} | ${applicationData.reason}\n`;
    
    try {
        fs.appendFileSync(APPLICATIONS_LOG, logLine, 'utf8');
        console.log('‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
            timestamp,
            minecraft_nick: applicationData.minecraft_nick,
            discord: applicationData.discord,
            email: applicationData.email
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', error);
    }
}

// API Routes

// POST /api/apply - –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
app.post('/api/apply', (req, res) => {
    console.log('üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', req.body);
    
    try {
        const validation = validateApplicationData(req.body);
        
        if (!validation.valid) {
            return res.status(400).json({
                success: false,
                error: validation.error
            });
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const applicationData = {
            minecraft_nick: req.body.minecraft_nick.trim(),
            discord: req.body.discord.trim(),
            email: req.body.email.trim().toLowerCase(),
            reason: req.body.reason.trim()
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        logApplication(applicationData);
        
        res.json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
    // –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Minecraft —Å–µ—Ä–≤–µ—Ä–∞
    const isOnline = Math.random() > 0.3; // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω
    
    res.json({
        online: isOnline,
        timestamp: new Date().toISOString(),
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        players: isOnline ? Math.floor(Math.random() * 20) : 0,
        maxPlayers: 20
    });
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ—Ñ–ª–∞–π–Ω'}`);
});

// GET /api/applications (–±–æ–Ω—É—Å) - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/applications', (req, res) => {
    try {
        if (!fs.existsSync(APPLICATIONS_LOG)) {
            return res.json({ applications: [] });
        }
        
        const logContent = fs.readFileSync(APPLICATIONS_LOG, 'utf8');
        const lines = logContent.trim().split('\n').filter(line => line.length > 0);
        
        const applications = lines.map(line => {
            const parts = line.split(' | ');
            return {
                timestamp: parts[0],
                minecraft_nick: parts[1],
                discord: parts[2],
                email: parts[3],
                reason: parts[4]
            };
        });
        
        res.json({ applications: applications.reverse() }); // –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —Å–≤–µ—Ä—Ö—É
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞—è–≤–æ–∫'
        });
    }
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ frontend
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../website/index.html'));
});

// 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
    res.status(404).json({
        error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

// 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../website/index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Chiwawa Server Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`üìã API endpoints:`);
    console.log(`   POST /api/apply - –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏`);
    console.log(`   GET /api/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞`);
    console.log(`   GET /api/applications - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫`);
    console.log(`üìù –ó–∞—è–≤–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤: ${APPLICATIONS_LOG}`);
    console.log(`üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});
