const { Pool } = require('pg');
require('dotenv').config();

const getDbHost = () => {
    if (process.env.NODE_ENV === 'production') {
        return process.env.DB_HOST || 'localhost';
    } else {
        return process.env.DB_HOST || '212.15.49.139';
    }
}

const pool = new Pool({
    host: getDbHost(),
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'chiwawa',
    user: process.env.DB_USER || 'chiwawa',
    password: process.env.DB_PASS || 'mtU-PSM-cFP-2D6',
    max: 10,
    idleTimeoutMillis: 60000,
    connectionTimeoutMillis: 30000,
    query_timeout: 20000,
    keepAlive: true,
    keepAliveInitialDelayMillis: 0,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function testAdminSettings() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...\n');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ:');
        const currentSettings = await pool.query('SELECT setting_key, setting_value, category FROM server_settings ORDER BY category, setting_key');
        currentSettings.rows.forEach(row => {
            console.log(`[${row.category}] ${row.setting_key}: ${row.setting_value}`);
        });
        console.log(`–í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${currentSettings.rows.length}\n`);

        // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞–∫ –≤ POST /api/admin/settings)
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
        const testServerName = 'ChiwawaServer-TEST-' + Date.now();
        
        await pool.query(`
            INSERT INTO server_settings (setting_key, setting_value, setting_type, category, description, updated_at) 
            VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
            ON CONFLICT (setting_key) 
            DO UPDATE SET 
                setting_value = EXCLUDED.setting_value,
                updated_at = CURRENT_TIMESTAMP
        `, ['server-name', testServerName, 'string', 'general', '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞']);

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞: ${testServerName}\n`);

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
        const updatedSetting = await pool.query('SELECT setting_value FROM server_settings WHERE setting_key = $1', ['server-name']);
        console.log(`üìñ –ß—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${updatedSetting.rows[0].setting_value}`);
        
        if (updatedSetting.rows[0].setting_value === testServerName) {
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞!');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é kebab-case –≤ camelCase (–∫–∞–∫ –≤ GET /api/admin/settings)
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫–ª—é—á–µ–π:');
        const allSettings = await pool.query('SELECT setting_key, setting_value, setting_type FROM server_settings ORDER BY setting_key');
        
        const convertedSettings = {};
        allSettings.rows.forEach(row => {
            const camelKey = row.setting_key.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
            let parsedValue;
            
            if (row.setting_type === 'boolean') {
                parsedValue = row.setting_value === 'true' || row.setting_value === true;
            } else if (row.setting_type === 'integer') {
                parsedValue = parseInt(row.setting_value);
            } else {
                parsedValue = row.setting_value;
            }
            
            convertedSettings[camelKey] = parsedValue;
        });

        console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
        Object.entries(convertedSettings).forEach(([key, value]) => {
            console.log(`${key}: ${value} (${typeof value})`);
        });

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (camelCase –≤ kebab-case)
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é:');
        const testMappings = {
            serverName: 'server-name',
            serverDescription: 'server-description',
            maxPlayers: 'max-players',
            smtpHost: 'smtp-host',
            trustPointsEmail: 'trust-points-email',
            autoApprovetrustLevel: 'auto-approve-trust-level'
        };

        Object.entries(testMappings).forEach(([camelCase, expectedKebab]) => {
            const actualKebab = camelCase.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);
            if (actualKebab === expectedKebab) {
                console.log(`‚úÖ ${camelCase} -> ${actualKebab}`);
            } else {
                console.log(`‚ùå ${camelCase} -> ${actualKebab} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedKebab})`);
            }
        });

        // 6. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        console.log('\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...');
        await pool.query('UPDATE server_settings SET setting_value = $1 WHERE setting_key = $2', ['ChiwawaMine', 'server-name']);
        console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê–¥–º–∏–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');

        await pool.end();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        process.exit(1);
    }
}

testAdminSettings();
